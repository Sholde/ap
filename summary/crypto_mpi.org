#+title:Evaluation des Performances et Modelisation Librairies Cryptographiques pour les Communications MPI
#+author:Sholde
#+date:2021

* Variables de test

  Utilisation de 4 librairies de cryptographie :

  - OpenSSL
  - BoringSSL
  - Libsodium
  - CryptoPP

  Utilisation de 2 différent système de réseaux :
  
  - Ethernet
  - InfiniBand

* Introduction

  Aujourd'hui les cloud utilisent des appliction du HPC avec MPI et
  ont besoin d'assuré la vie privé et l'intégrité des informations. Le
  fait de sécurisé la librairie MPI est donc un bon choix mais
  différentes failles ont été trouvé dans les premières versions.

  De plus pour accélerer les chiffrements et déchiffrements les
  construceurs de processeurs ont intégré des instructions dans le
  CPU.

  Les librairies cryptographiques modernes utilisent les librairies
  cité ci-dessus qui ont été validé dans un standart.

  Le but est de tester les 4 librairies cryptographiques sur 2 types de
  réseaux différent sur les communications MPI.

  Pour obtenir des gains théorique nous allons séparé les
  communication point à point MPI en 2 paramètres :
  
  - une unique communication point à point comme un test de Ping-Pong
  - de multiple communications en concurence

  Avec notre modèle très simple de communication point à point MPI
  nous allons nous interresser aux performance ainsi qu'u éventuelle
  technique d'optimization pour amèliorer ces performances.

* Travail en relation
** Systèmes antérieurs à la cryptographie *MPI*
   
   Il exeiste des systèmes qui ont les deux problèmes de vulnaribilité
   suivant :
   - la vie privée
   - intégrité des donnée

*** Vie privée

    La vie privé est le but principale du projet, mais est impartaite
    dû à l'insécurité ou l'abus des algorithmes cryptographiques. Par
    exemple le fait ce créer une librairie *MPI* avec un schéma de
    chiffrement simple comme *ECB*.

*** Intégrité

    Différentes options ont été proposés.
    Le premier choix pour sécurisé l'intégrité des messages serait
    d'ajuter une signature mais les schéma de signature digitales
    actuelles coûtent trop cher.
    Le deuxième serait de faire un *checksum* sur tout les messages
    mais il faudrai utilisé un schéma plus compliqué qu'un simple
    schéma de chiffrement par block en chaîne.
    Une dernière option était de chiffrer les données avec un mode
    *ECB* mais cela n'apporte pas l'intégrité du message.

*** A noté

    Ces insécurités ne sont pas présentes dans la litératur. Néanmoins
    les communication MPI ont besoin d'assurer la vie privée et
    l'intégrité des messages.

    De plus les instructions cryptographiques proposé par les
    différent constructeurs de CPU deviennet omniprésent et les
    librairies cryptographiques les utilisent de plus en plus.

** Modélisation des performances

   Les modèles de performances les plus notables :
   - Hockney model
   - LogP model
   - LogGP model
   - PLogP model

   Nous allons montré par la suite que le modèle de *Hockney* peut
   être utilisé pour les paramètres Ping Pong chiffré.

   Les communicatoion chiffré peuvent être vu comme des simples
   communications MPI sur un canal authentifié et/ou privée.

* Contexte
** Schéma de chiffrement
*** Une vue à vole d'oiseau du chiffrement

    Un schéma symétrique de chiffrement est divisé en 3 phase :
    - la génération de la clé
    - le chiffrement
    - le déchiffrement

    A chaque fois que l'on veut chiffrer un message on a besoin du
    message et de la clé, ainsi que pour déchiffrer, on dit que c'est
    un schéma symétrique car la même clé permet de chiffrer et de
    déchiffrer.

    Il y a différent type de schéma au sein des chiffrements
    symétriques comme le chiffrement par blocks. Mais tous les schéma
    symétriques n'ont pas le même taux de sécurité. Par exemple le
    chiffrement pas block tel *ECB* n'est pas sécurisé.

    Il y a d'autres paramètres comme l'intégrité et la performances,
    pour toutes ces raisons nous avons choisis le schéma CGM qui
    propose la vie privée et l'intégrité des messages, la performances
    ainsi d'avoir l'avantage de n'avoir aucune connaissance techniques
    pour comprendre notre travail.

*** Aperçu de GCM
    
    Nous allons utilisé le chiffrement par block AES, avec 2
    différentes tailles de clé : 128 et 256 bits, respectivement pour
    la performance et la sécurité.

    De plus dans l'algoritmhe AES le message chiffré à 28 octets de
    plus que le message clair dû à l'algorithme qui utilise un
    compteur pour identifier les messages.

** Librairies Cryptographiques

   Nos 4 librairies cryptographiques sont publiques et beaucoup
   utilisé.

   *OpenSSL* étant la plus populaire, de nombreuses vulnaribilité ont
   été trouvé. Mais elle implémente les protocoles *TLS* et *SSL*.

   *BoringSSL* est un fork de OpenSSL par *Google* pour leurs produits
   tel que : Chrome/Chromium et Android.

   *Libsodium* a pour objectif la sécurité et la facilité
   d'utilisation. Son avantage est sa portabilité.

   *CryptoPP* est une librairie cryptographique pour le language *C++*
    adopté par *Microsoft* et *Steam*.

* MPI avec des communications chiffré

  Nous avons implémenté une librairie MPI avec des communications
  chiffré avec AES-GCM pour nos 2 tailles de clés et nos 4 librairies.

  Les clés sont en clair dans le code sources pour le moment car le
  but est de testé les performances des librairies cryptographiques
  MPI.

  Pour notre algorithme, il est très simple à comprendre car nous
  n'abordons pas les subtilités bas niveaux.

* Experience
** Introduction

  Nous allons évalué les perfomances de chaque librairies pour
  laquelle utilisé avec les communications *MPI*.

*** Equipement du système

    - CPU: Intel Xeon E5-2620 v4 2.10 GHz
    - Memoire: DDR4 RAM 64 GB
    - OS: CentOS 7.6
    - Réseaux: 
      - Ethernet (Intel 82599ES SFI/SFP+)
      - InfiniBand GDR one (Mellanox MT25408A0-FCC-QI ConnectX)
    - Compilation:
      - MPICH
      - MVAPICH
      - Niveau d'optimisation: -O2

*** Analyse comparatives

    - *Chiffrement-Déchiffrement:* étude de performance de 500 000
      chiffrement et déchiffrement
    - *Ping-Pong:* mesure de performance des communications bloquantes et
      suivant la taille du message :
      - 1 B < taille < 1 MB : envoie 10 000 fois
      - 1 MB < taille < 2 MB : envoie 1 000 fois
    - *OSU micro-analyse:* mesure de performance des communications non
      bloquantes. Envoie 64 message par itération pour 100 itération et
      attends une réponse à chaque itération.
    - *Analyse des NAS parralèles:* mesure des performance de chiffrement
      avec MPI dans des applications en utilisant une taille de *Class
      C* pour :
      - BT, CG, FT, IS, MG et SP

*** Méthodologie de l'ananlyse

    Nous devons avoir une dérivation standart inférieur à 5% qui
    correspond à un interval de confiance de 99%.

    Analyse comparative utilisé: Ping-Pong, OSU and NAS.

    Différent paramètres testé: 
    - 4 rank/4 node
    - 16 rank/ 4 node
    - 16 rank/8 node
    - 64 rank/8 node

*** Ce que nous relevons

    BoringSSL et OpenSSL délivre les même résultat ce qui n'est pas
    surprenant car *BoringSSL* est un fork de *OpenSSL*. Et le résultat
    est le même pour nos 2 tailles de clé : 128 et 256 bits.

** Résultat Ethernet
*** Chiffrement-Déchiffrement

    Le classement est le suivant
      1. BoringSSL
      2. Libsodium
      3. CryptoPP

*** Ping-Pong

    Meilleur performance pour des petites tailles de messages ne
    dépassant pas 1 KB.

*** Messages larges

    Toutes les librairies ont des performances catastrophique par
    rapport à la *baseline* (qui est l'envoie d'un message non
    chiffré) qui peut s'expliquer par :
    - le coût du chiffrement-déchiffrement
    - le coût des communications MPI

*** Messages petits

    Nos 4 librairies ont des performances raisonables.
*** Bande passante multi-pair OSU

    Plus la taille du message est grande plus la puissance de calcul
    augmente et peux chevaucher avec les communication MPI et
    d'utiliser toute la bande passante.

    BoringSSL a besoin de plusieur pair pour être efficace.

*** Communication collective

    Comparaison de *BoringSSL* et *Libsodium* pour un message de
    *2MB* :
    - BoringSSL à une bande passante *2.37* plus rapide
    - BoringSSL prend *2.03* de temps de moins

    Pour *BoringSSL*, le chiffrement d'un message et le déchiffrement
    pour une taille de *16 KB* et de *2 MB* est le même.

    *BoringSSL* est plus rapide que *CryptoPP*.

*** Analyse des NAS

    Rien compris.

** Résultat Infiniband
*** Chiffrement-Déchiffrement

    Le compilateur *MVAPICH2-2.3* donne de meilleur performance que
    *gcc*.

*** Ping Pong

    Comme pour le réseux *Ethernet*, les messages de tailles moyennes
    et grandes sont beacoup plus bas que la *baseline*, mais c'est
    encore pire.

    Pour les petites tailles de message c'est un peu meilleur, mais même
    pour *BoringSSL* les performnaces ne sont pas bonne.

*** Bande passante multi-pair OSU

    Comme pour le réseaux *Ethernet* plus il y a de pair, plus la
    bande passante des libraires est proche la *baseline*.

    Mais pour les messages de petites tailles, losqu'il y a 8 pair la
    bande passante est étranglé.

*** Communication Collective

    Suit également les performance du réseaux *Ethernet* mais comme la
    latence de l'Infiniband est plus basse, la surcharge est bien
    pire.

*** Analyse des NAS

    Grâce au nouveau compilateur, la librairie *CryptoPP* offre de
    meilleurs performances.

* Modelisation des communication MPI point à point chiffré

  Parmaètres:
  - pair simple point à point (Ping Pong)
  - pair multiple point à point (OSU)

  Modèles:
  - Hockney
  - max-rate

** Pair simple
*** Modelisation de la communication

    Les communications MPI bloque les performances car elles sont les
    plus couteuse et le chiffrement-déchiffrement est rapide.

    Temps = latence + bande passante asymptotique * taille du message(octets)

*** Modelisation du chiffrement et du déchiffrement

    C'est intéressant de s'interresser au temps de
    chiffrement-déchiffrement seulement.

    Temps = surcharge initial + taux de chiffrement-déchiffrement *
    taille du message(octets)

*** Modelisation du la communication chiffré

    Etape:
    1. chiffré le message
    2. envoyé le message
    3. déchiffré le message

    Temps = Temps communication + Temps chiffrement-déchiffrement

    En comparant les résultat obtenu et le modèle nous obtnenons a peu
    près les bon résultat pour les 2 types de réseaux et les 3
    librairies BoringSSL, Libsodium et CryptoPP. OpenSSL ayant les
    même résultat que BoringSSL, ils n'ont pas été divulgué.

** Pair multiple

   On considère la performance de pair en concurence pour des
   communications chiffré MPI point à point comme l'ananlyse OSU.

*** Modelisation de la communication
    
    Temps = latence + bande passante asymptotique * nb d'expéditeur * taille du
    message(en octets)

*** Modelisation du chiffrement et du déchiffrement

    Temps = coût initial + (nb d'expéditeur * taille du
    message(octets)) / (A + B * (nb thread - 1))

    D'après le modèle ajouté des thread ralentira les performances par threads.

*** Modelisation du la communication chiffré

    Peut être effectuer de plusieur manières et le modèle dépends de
    la manières dont les communication multiple sont faites.

    On va utilisé l'analyse à pair multiple OSU pour illustrer les
    propos et nous allons faires les suppositions suivantes :
    - le temps de chiffrement ainsi que de déchiffrement sont les
      mêmes
    - la transmission du message *i* et le chiffrement du message
      *i+1* peut se faire en même temps. Et donc, le déchiffrement du
      message *i* et la réception du message *i+1* aussi.

    *A noter:* ce modèle peut être dérivé des résultats de performance
    indépandant pour une librairies MPI et des librairies de
    chiffrement.

** Discussion
   
   Notre modèle nous permet de réfléchir sur les performances des
   communication *MPI* car il permet de prédire les performances sans
   devoir implémenter des communications chiffré *MPI*.

   Les performances pour un seul coeur de calcul sont limité par la
   vitesse de chiffrement et non par la vitesse de communication.

   Etant donnée que nous avons atteint la loi de Moore et que la
   puissace de calcul d'un coeur n'augmente pas beaucoup. Et comme la
   vitesse de communication ne cesse d'augmenter. Les communications
   de chiffrement MPI vont devenir de plus en plus difficile.

   Pour pour améliorer les performances d'un seul coeur sur de larges
   messages, on pourrai découper le messages un plein de petit
   segments, les chiffrés et les envoyés avec des communication non
   bloquantes.

* Conclusion

  En prenant en considération la vié privée et l'intégrité des donnée,
  nous avons conclu que les librairies *OpenSSL* et *BoringSSL* ont
  les meilleurs performances.

  Nous avons pu voir que pour ces deux libraries, pour l'analyse de
  performance des NAS nous n'avons eu que *12.75%* de gain pour
  *Ethernet* et *17.93%* de gain pour l'Infiniband.

  Nous avons pu voir que le modle de *Hockney* modélise avec une
  grande présision le chiffrement en *Ping-Pong*. Et que nous n'avont
  besoin que des résultats de performance d'une librairie *MPI* et
  d'une librairie cryptographique, ce qui veut dire que nous n'avons
  pas besoin d'implémenter un librairie chiffré MPI pour modéliser les
  performances.

* Reference

  ./crypto_mpi.pdf
