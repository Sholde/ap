#+title: TD SIMD
#+author: Nicolas Bouton
#+date: 2020

* Information

  Just the *install.sh* srcipt must be called.

** Script
*** install script

    Compile, desassemble, move *.asm* file and clean binary file.

    Usage :

    #+begin_src bash
    $ ./install.sh
    #+end_src

*** asm script

   The script *asm.sh* just desassemble all binaries (that *make*
   command produce) in the directories.

   Usage :

    #+begin_src bash
    $ ./asm.sh
    #+end_src

*** move script
    
    Move the *.asm* file to *adm* directory.

   Usage :

    #+begin_src bash
    $ ./move.sh
    #+end_src

** Makefile
*** Compile

   Run the command below to compile the program with *gcc* and *clang*
   with different optimization.

   #+begin_src bash
   $ make
   #+end_src

*** Clean   

    You can also clean the folder with :

   #+begin_src bash
   $ make clean
   #+end_src
    
** Provide file

   There are 3 given files on the folders : *gcc_ver.txt*,
   *clang_ver.txt* and *cpuinfo.txt*.

* Answer
** Introduction

  Here I will compare *two compiler* by optimization flags.
  
  - gcc
  - clang
    
** Code

   In my c code, I let user to choice one size of the matrix to see
   the dynamic compilation effect and I fix a size in the code to see
   the static compilation effect.

** Base
*** gcc
*** clang
*** ccl
** Light
*** gcc
*** clang
*** ccl
** Optimized
*** gcc
*** clang
*** ccl
** High
*** gcc
*** clang
*** ccl
** Kamikaze
*** gcc
*** clang
*** ccl
** Conclusion

   _Vectorization :_

   | compiler \ opti | base | light | opti | high | kamikaze |
   |-----------------+------+-------+------+------+----------|
   | gcc             | -    | -     | -    | -    | -        |
   | clang           | -    | -     | -    | -    | -        |
